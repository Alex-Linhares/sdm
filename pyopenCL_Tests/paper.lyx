#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
A massively parallel, cross-platform, open source, implementation of Sparse
 Distributed Memory
\end_layout

\begin_layout Author
Marcelo Salhab Brogliato; Alexandre Linhares
\end_layout

\begin_layout Standard
blah blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah blah
\end_layout

\begin_layout Section
Introduction: desiderata of a model of long-term memory
\end_layout

\begin_layout Standard
This is a non-mathematical introduction, with which we would like to propose
 a number of psychological and neuroscietific constraints to any serious
 theory of long-term memory.
 
\end_layout

\begin_layout Standard
blah blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah blahblah blah
\end_layout

\begin_layout Itemize
Natural for neural computation
\end_layout

\begin_layout Standard
blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blah
\end_layout

\begin_layout Itemize
Robustness towards loss of neurons.
\end_layout

\begin_layout Standard
Neurons die.
 Yet human memory is able to retain most significant information---the system
 is not fragile to the gradual biological processes in which some neurons
 are lost and others are born.
 blah blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah
\end_layout

\begin_layout Itemize
Gracious degradation as the memory gets full
\end_layout

\begin_layout Standard
blah blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah
\end_layout

\begin_layout Itemize
Robustness to noise and to few cues
\end_layout

\begin_layout Standard
blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah
\end_layout

\begin_layout Itemize
Tip-of-Tongue
\end_layout

\begin_layout Standard
blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah blahblah.
 Kanerva + paper Marcelo.
\end_layout

\begin_layout Itemize
Ability to make (quasi-instantaneous) analogies
\end_layout

\begin_layout Standard
ability to regroup concepts (through XOR, explained later) as they are found
 in different contexts.
 Example of word "bank".
 Real-life example of Russia (as Military SuperPower, as very cold weather).
 Hofstadter + Lakoff + alguns de meus papers.
\end_layout

\begin_layout Itemize
A `small-world' network of concepts
\end_layout

\begin_layout Standard
Paper Daniel
\end_layout

\begin_layout Itemize
faltam 1 conceito chave ainda aqui...
 
\end_layout

\begin_layout Standard
blahblah blahblah blahblah blahblah blahblah blahblah blahblah blahblah
 blahblah
\end_layout

\begin_layout Section
Sparse Distributed Memory: the model
\end_layout

\begin_layout Standard
blah blah blah (Most of the text from Marcelo's thesis here).
 
\end_layout

\begin_layout Subsection
A simple 64-dimensional model.
 
\end_layout

\begin_layout Standard
We use a 64-bit implementation in order to illustrate some of the concepts
 more clearly here.
 Normal distribution, 8x8 characters (with noise + cleaning), The view from
 a neuron, etc.
 Each of our graphs will contain links to the code that has created it.
 
\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Standard
Our implementation, though just a version 1.0, follows the industrial-strength
 design of GNU, Linux, and Git, by breaking the system's components into
 chunks (qual Ã© a palavra correta?).
 Each chunk (?) has a fixed, stable, APIs, enable that its internal computations
 can be changed, as technology evolves, without affecting other chunks(modules)
 that may depend on it.
 This also enables flexibility in the design of related architectures, such
 as HRRs (full numbre of HRRs here) + citations.
 Our performance comparisons run through a gamut of different architectures
 (CPUs and GPUs), and operating systems (OSX, Linux, and Microsoft Windows).
\end_layout

\begin_layout Subsection
A pyOpenCL implementation
\end_layout

\begin_layout Standard
cross-platform: Apple's OSX, Linux, Windows, FPGAs, Multiproessor machines.
 
\end_layout

\begin_layout Standard
Why pyOpenCL (and not OpenCL)? PYOPENCL + PYCUDA PAPER
\end_layout

\begin_layout Standard
A simple example: varying the HASH_TABLE_SIZE
\end_layout

\begin_layout Subsubsection
Creating an universal set of address space locations 
\end_layout

\begin_layout Standard
For researchers to share results, we propose that an universal set of hard
 location addresses should be shared.
 Hence we create each hard location address through hashes, using the SHA256
 hash function for each hard location.
 Hence HL_address[0] = SHA256(``0''), and so forth.
 This enables the entire community to work on a robust, uniformly-distributed
 file, and constantly reproduce results with ease, with no problems stemming
 from different uses or architectures creating different random function
 values.
 
\end_layout

\begin_layout Standard
Because this is a once-per-run initialization operation, we simply pack
 the memory addresses into the file ''.
 
\end_layout

\begin_layout Subsection
Scanning the Hard Location address space
\end_layout

\begin_layout Standard
Given a bitstring, how can we find out which hard locations are activated
 by it? I.e., which hard locations have a Hamming distance less than threshold
 T? The major computational task involved in a simulation of an SDM is the
 scanning of the address space.
 In our model, for each bitstring involved, it ist compared to 
\begin_inset Formula $2^{20}=1048576$
\end_inset

 hard locations, and this is bit by bit comparison, such that in our 256-dimensi
onal space we have---for each single scan---268,435,456 bit-compares involved.
 This is a daunting task when one has few processors, yet is an easy task
 when all the numbers of hard locations equals the number of neurons (as
 proposed by the model).
 
\end_layout

\begin_layout Standard
Here we turn to the question on how to implement this in OpenCL efficiently.
 Unlike high-level programming languages, OpenCL does not provide size-adjustabl
e lists as a run evolves.
 It does, instead, work on contiguous blocks of memory (arrays) and distributes
 the task at hand, for instance, to the multiple device processors of a
 GPU.
 
\end_layout

\begin_layout Standard
Because memory latency between devices is a major performance bottleneck,
 this leads to a problem.
 While one could easily compute the distances between a bitstring and each
 hard location, the resulting array of distance values would also comprise
 receiving the results of a large,
\begin_inset Formula $2^{20}$
\end_inset

-sized array, to represent those distances.
 Moreover, since only about 
\begin_inset Formula $1/1000$
\end_inset

 hard locations would be 
\emph on
active
\emph default
, over 99% of this transfer time is wasted.
 
\end_layout

\begin_layout Standard
Here we propose two solutions: one scan with no loss, and a second that
 that minimizes overall time with a small amount of lost hard locations
 (generally less than 1% hard location loss, and this loss is configurable
 through a time tradeoff).
 
\end_layout

\begin_layout Subsubsection
Performance comparisons
\end_layout

\begin_layout Subsection
Scanning the Hard Location address space and retrieving the distances
\end_layout

\begin_layout Standard
blah blah
\end_layout

\begin_layout Subsubsection
Performance comparisons
\end_layout

\begin_layout Subsection
Writing to the memory 
\end_layout

\begin_layout Standard
blah blah
\end_layout

\begin_layout Subsubsection
Performance comparisons
\end_layout

\begin_layout Subsection
Reading from the memory
\end_layout

\begin_layout Standard
blah blah
\end_layout

\begin_layout Subsubsection
Performance comparisons
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
Back to the desiderata.
\end_layout

\begin_layout Standard
Despite its promising outlook, there is a lack of a industrial-strnght,
 cross-platform, implementation of SDM in which other researchers can build
 upon, and explore different design directions.
 
\end_layout

\end_body
\end_document
